Absolutely! Hereâ€™s a simple, clean, and modern white-themed interface for your Replit Interview Assistant tool. This example includes:

- A white background with subtle shadows and rounded corners
- Clear input for questions
- AI answer display
- Audio recording controls (optional, can be removed if not needed)
- Responsive design

**You can copy-paste this into a Replit HTML/CSS/JS project.**

---

## index.html

```html



  
  Interview Assistant
  
  


  
    Interview Assistant
    
      
      Ask
    
    
      ðŸŽ¤ Start Recording
      Stop
      
      
    
    
  
  


```

---

## style.css

```css
body {
  background: #f8f9fa;
  font-family: 'Segoe UI', Arial, sans-serif;
  margin: 0;
  min-height: 100vh;
}

.container {
  max-width: 480px;
  margin: 40px auto;
  background: #fff;
  border-radius: 18px;
  box-shadow: 0 2px 16px rgba(0,0,0,0.07);
  padding: 32px 24px 24px 24px;
}

h1 {
  text-align: center;
  font-weight: 600;
  color: #222;
  margin-bottom: 24px;
  letter-spacing: 0.5px;
}

form {
  display: flex;
  gap: 8px;
  margin-bottom: 18px;
}

input[type="text"] {
  flex: 1;
  padding: 12px;
  border: 1px solid #e0e0e0;
  border-radius: 8px;
  font-size: 1rem;
  background: #fafbfc;
  outline: none;
  transition: border 0.2s;
}

input[type="text"]:focus {
  border-color: #6c63ff;
}

button {
  padding: 12px 18px;
  border: none;
  border-radius: 8px;
  background: #6c63ff;
  color: #fff;
  font-weight: 500;
  font-size: 1rem;
  cursor: pointer;
  transition: background 0.2s;
}

button:disabled {
  background: #bbb;
  cursor: not-allowed;
}

.audio-controls {
  display: flex;
  align-items: center;
  gap: 10px;
  margin-bottom: 18px;
}

#recordingStatus {
  color: #6c63ff;
  font-size: 0.95rem;
}

.answer-box {
  background: #fafbfc;
  border-radius: 10px;
  min-height: 80px;
  padding: 18px;
  font-size: 1.08rem;
  color: #333;
  box-shadow: 0 1px 4px rgba(0,0,0,0.03);
  margin-top: 8px;
  white-space: pre-line;
}
```

---

## script.js

```javascript
// --- AUDIO RECORDING ---
let mediaRecorder;
let audioChunks = [];

const startBtn = document.getElementById('startRecording');
const stopBtn = document.getElementById('stopRecording');
const status = document.getElementById('recordingStatus');
const audioPlayback = document.getElementById('audioPlayback');

startBtn.onclick = async () => {
  try {
    const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
    mediaRecorder = new MediaRecorder(stream);
    audioChunks = [];
    status.textContent = "Recording...";
    startBtn.disabled = true;
    stopBtn.disabled = false;
    mediaRecorder.ondataavailable = e => audioChunks.push(e.data);
    mediaRecorder.onstop = () => {
      const audioBlob = new Blob(audioChunks, { type: 'audio/webm' });
      audioPlayback.src = URL.createObjectURL(audioBlob);
      audioPlayback.style.display = 'block';
      status.textContent = "Recording stopped. You can play your recording.";
      startBtn.disabled = false;
      stopBtn.disabled = true;
      // Optionally: send audioBlob to backend for transcription
    };
    mediaRecorder.start();
  } catch (err) {
    status.textContent = "Microphone access denied or error occurred.";
    console.error(err);
  }
};

stopBtn.onclick = () => {
  if (mediaRecorder && mediaRecorder.state !== "inactive") {
    mediaRecorder.stop();
  }
};

// --- QUESTION FORM ---
document.getElementById('questionForm').onsubmit = async function(e) {
  e.preventDefault();
  const question = document.getElementById('questionInput').value.trim();
  if (!question) return;
  document.getElementById('answerBox').textContent = "Thinking...";
  // Replace this with your actual API call to OpenAI or backend
  // For demo purposes, we'll just echo the question
  setTimeout(() => {
    document.getElementById('answerBox').textContent = `AI Answer: (Your backend/API response goes here for "${question}")`;
  }, 1200);
  document.getElementById('questionInput').value = '';
};
```

---

## How to Use

- **Manual Q&A:** Type a question and click "Ask" to get an answer.
- **Audio Recording:** Click "Start Recording" to record, "Stop" to finish, and play back your audio.
- **Clean, white, modern look:** The interface is visually appealing, minimal, and easy to use.

---

**You can further connect the question form and audio blob to your backend or OpenAI API as needed.**  
Let me know if you want the audio to be transcribed automatically or if you want to hide the audio feature!

---
Answer from Perplexity: pplx.ai/share